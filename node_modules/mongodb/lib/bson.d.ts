import type { calculateObjectSize as calculateObjectSizeFn, deserialize as deserializeFn, DeserializeOptions, serialize as serializeFn, SerializeOptions } from 'bson';
/** @internal */
export declare const deserialize: typeof deserializeFn;
/** @internal */
export declare const serialize: typeof serializeFn;
/** @internal */
export declare const calculateObjectSize: typeof calculateObjectSizeFn;
export { Binary, BSONRegExp, BSONSymbol, Code, DBRef, Decimal128, Document, Double, Int32, Long, Map, MaxKey, MinKey, ObjectId, Timestamp } from 'bson';
/**
 * BSON Serialization options.
 * @public
 */
export interface BSONSerializeOptions extends Omit<SerializeOptions, 'index'>, Omit<DeserializeOptions, 'evalFunctions' | 'cacheFunctions' | 'cacheFunctionsCrc32' | 'allowObjectSmallerThanBufferSize' | 'index' | 'validation'> {
    /** Return BSON filled buffers from operations */
    raw?: boolean;
    /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */
    enableUtf8Validation?: boolean;
}
export declare function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions;
/**
 * Merge the given BSONSerializeOptions, preferring options over the parent's options, and
 * substituting defaults for values not set.
 *
 * @internal
 */
export declare function resolveBSONOptions(options?: BSONSerializeOptions, parent?: {
    bsonOptions?: BSONSerializeOptions;
}): BSONSerializeOptions;
//# sourceMappingURL=bson.d.ts.map