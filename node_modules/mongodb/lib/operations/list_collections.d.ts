import type { Binary, Document } from '../bson';
import { AbstractCursor } from '../cursor/abstract_cursor';
import type { Db } from '../db';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import { Callback } from '../utils';
import { CommandOperation, CommandOperationOptions } from './command';
import { ExecutionResult } from './execute_operation';
/** @public */
export interface ListCollectionsOptions extends CommandOperationOptions {
    /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */
    nameOnly?: boolean;
    /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */
    authorizedCollections?: boolean;
    /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */
    batchSize?: number;
}
/** @internal */
export declare class ListCollectionsOperation extends CommandOperation<string[]> {
    options: ListCollectionsOptions;
    db: Db;
    filter: Document;
    nameOnly: boolean;
    authorizedCollections: boolean;
    batchSize?: number;
    constructor(db: Db, filter: Document, options?: ListCollectionsOptions);
    execute(server: Server, session: ClientSession | undefined, callback: Callback<string[]>): void;
    generateCommand(wireVersion: number): Document;
}
/** @public */
export interface CollectionInfo extends Document {
    name: string;
    type?: string;
    options?: Document;
    info?: {
        readOnly?: false;
        uuid?: Binary;
    };
    idIndex?: Document;
}
/** @public */
export declare class ListCollectionsCursor<T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo = Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo> extends AbstractCursor<T> {
    parent: Db;
    filter: Document;
    options?: ListCollectionsOptions;
    constructor(db: Db, filter: Document, options?: ListCollectionsOptions);
    clone(): ListCollectionsCursor<T>;
    /** @internal */
    _initialize(session: ClientSession | undefined, callback: Callback<ExecutionResult>): void;
}
//# sourceMappingURL=list_collections.d.ts.map